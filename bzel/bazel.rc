# Mastiff Bazel configuration file.
#
# This file tries to group and simplify build options for Mastiff
#
# +------------------------------------------------------------+
# | Startup Options                                            |
# +------------------------------------------------------------+
startup --batch_cpu_scheduling
startup --host_jvm_args="-XX:-UseParallelGC"

fetch --experimental_multi_threaded_digest=true
query --experimental_multi_threaded_digest=true

# +------------------------------------------------------------+
# | Common Options                                             |
# +------------------------------------------------------------+
# Force bazel output to use colors (good for jenkins) and print useful errors.
common --color=yes

# +------------------------------------------------------------+
# | Bazel Configurations                                       |
# +------------------------------------------------------------+
# Make Bazel print out all options from rc files.
build --color=yes
build --announce_rc
build --show_timestamps
build --show_progress
build --show_loading_progress
#build --subcommands
#build --subcommands=pretty_print

# Setup stderr size
build --experimental_ui_max_stdouterr_bytes=-1

# Work around the sandbox issue.
build --spawn_strategy=local

# Enable colorful output of GCC
build --cxxopt="-fdiagnostics-color=always"

# +------------------------------------------------------------+
# | Gdb Configurations                                         |
# +------------------------------------------------------------+
build:dbg --compilation_mode=dbg
build:dbg --copt=-ggdb
build:dbg --cxxopt=-ggdb
build:dbg --copt=-g
build:dbg --cxxopt=-g
build:dbg --strip=never
# dbg config, as a shorthand for '--config=optimize -c dbg'
build:dbg -c dbg

build:opt --strip=always
build:opt --compilation_mode=opt
build:opt -c opt

# Do not show warnings from external dependencies.
# build --output_filter="^//"

build --per_file_copt=external/upb/.*@-Wno-sign-compare
build --per_file_copt=external/upb/.*@-Wno-error=stringop-truncation
build --per_file_copt=external/upb/.*@-Wno-error=array-bounds
#
# +------------------------------------------------------------+
# | C/C++ Options                                              |
# +------------------------------------------------------------+
#build --copt="-Werror=sign-compare"
build --copt="-Werror"
build --copt="-Werror=return-type"
build --copt="-Werror=switch"
build --copt="-Wno-comment"
build --copt="-Wno-error=array-bounds"
build --copt="-Wno-error=maybe-uninitialized"
build --copt="-Wno-error=unused-but-set-variable"
build --copt="-Wno-error=stringop-truncation"

build --cxxopt="-Werror"
build --cxxopt="-Werror=reorder"
build --cxxopt="-Wno-error=array-bounds"
build --cxxopt="-Wno-error=sign-compare"
build --cxxopt="-Wno-error=unused-function"
build --cxxopt="-Wno-error=class-memaccess"
build --cxxopt="-Wno-error=maybe-uninitialized"
build --cxxopt="-Wno-error=unused-variable"
build --cxxopt="-Wno-error=stringop-truncation"
build --cxxopt="-Wno-error=attributes"
build --cxxopt="-Wno-error=format-security"
build --cxxopt="-Wno-error=deprecated-declarations"
build --cxxopt="-Wno-comment"

#build --cxxopt="-fPIC"
#build --copt="-fPIC"
build --force_pic

# Default paths for SYSTEM LIBRARIES
build --define=PREFIX=/usr
build --define=LIBDIR=$(PREFIX)/lib
build --define=INCLUDEDIR=$(PREFIX)/include
build --define=use_fast_cpp_protos=true

#build --config=optimize
# Instruction set optimizations
build:optimize --copt=-march=native
build:optimize --host_copt=-march=native

# +------------------------------------------------------------+
# | Host Platform Configurations                               |
# +------------------------------------------------------------+
# HOST, hardware: x64, os: Linux, toolchain: gcc
#build --host_platform=//3rd_party/toolchain:mstf_x64
#build --host_crosstool_top=@bazel_tools//tools/cpp:toolchain

# +------------------------------------------------------------+
# | ToolChains Configurations                                  |
# +------------------------------------------------------------+
# TARGET, hardware: aarch_64, os: Linux
#build --toolchain_resolution_debug='//3rd_party/toolchain:mstf_toolchain_type'
#build --toolchain_resolution_debug=''

build --verbose_failures
build --verbose_explanations

# arm32
build:gcc_cross_arm32 --cpu=arm
build:gcc_cross_arm32 --define buildtool=gcc_arm
build:gcc_cross_arm32 --platforms=//3rd_party/toolchain:mstf_arm
build:gcc_cross_arm32 --crosstool_top=//3rd_party/toolchain:mstf_cc_arm_gcc64_suite

# aarch 6.4.1 compiler
build:gcc64_cross_aarch64 --cpu=aarch64
build:gcc64_cross_aarch64 --define buildtool=gcc_aarch64_641
build:gcc64_cross_aarch64 --platforms=//3rd_party/toolchain:mstf_aarch64
build:gcc64_cross_aarch64 --crosstool_top=//3rd_party/toolchain:mstf_cc_aarch64_gcc64_suite

# aarch 9.4 compiler
build:gcc94_cross_aarch64 --cpu=aarch64
#build:gcc94_cross_aarch64 --platforms=//3rd_party/toolchain:mstf_aarch64
#build:gcc94_cross_aarch64 --incompatible_enable_cc_toolchain_resolution
build:gcc94_cross_aarch64 --crosstool_top=//3rd_party/toolchain:mstf_cc_aarch64_gcc94_suite
build:gcc94_cross_aarch64 --extra_toolchains=//3rd_party/toolchain:target_linux_aarch64_exe_host_toolchain_cc

# x86
#build:plat_x86 --cpu=x86_64
build:plat_x86 --define buildtool=gcc_x64
#build:plat_x86 --platforms=@local_config_platform//:host
#build:plat_x86 --platforms=//3rd_party/toolchain:mstf_x64
#build:plat_x86 --crosstool_top=//3rd_party/toolchain:mastiff_gcc_suite_local

# Build with profiling
build:prof --linkopt=-lprofiler
build:prof --cxxopt="-DENABLE_PERF=1"

# Build Mastiff with C++ 17 features.
build:c++17 --cxxopt=-std=c++1z
# build:c++17 --cxxopt=-stdlib=libc++
build:c++1z --config=c++17
build --cxxopt=-std=c++17
build --host_cxxopt=-std=c++17

# Enable C++14 (aka c++1y) by default
#build --cxxopt="-std=c++14"
#build --host_cxxopt="-std=c++14"

# +------------------------------------------------------------+
# | Test Configurations                                        |
# +------------------------------------------------------------+
test --flaky_test_attempts=3
test --test_size_filters=small,medium
# test --test_env=LD_LIBRARY_PATH
# test --test_env=PYTHONPATH

# By default prints output only from failed tests.
test --test_output=errors

test:unit_test --test_verbose_timeout_warnings

coverage --javabase="@bazel_tools//tools/jdk:remote_jdk11"
# coverage --host_javabase="@bazel_tools//tools/jdk:remote_jdk11"
coverage --instrument_test_targets
coverage --combined_report=lcov
coverage --nocache_test_results
# coverage --coverage_report_generator="@bazel_tools//tools/test/CoverageOutputGenerator/java/com/google/devtools/coverageoutputgenerator:Main"

coverage --cxxopt=--coverage
coverage --cxxopt=-fprofile-arcs
coverage --cxxopt=-ftest-coverage
coverage --linkopt=-lgcov


# +------------------------------------------------------------+
# | CPP Lint Tests & Unit Tests                                |
# +------------------------------------------------------------+
# By default, cpplint tests are run as part of `bazel test` alongside all of
# the other compilation and test targets.  This is a convenience shortcut to
# only do the cpplint testing and nothing else.
# Do bazel test --config=cpplint <target> to enable this configuration.
# To enable the lint test, the BUILD *must* load the cpplint.bzl by having
# 'load("//tools:cpplint.bzl", "cpplint")' at the beginning and 'cpplint()'
# at the end.
test:cpplint --test_tag_filters=cpplint
test:cpplint --build_tests_only
test:cpplint --flaky_test_attempts=1
# Regular unit tests.
test:unit_test --test_tag_filters=-cpplint
# Coverage tests
coverage --test_tag_filters=-cpplint

# +------------------------------------------------------------+
# | Python Configurations                                      |
# +------------------------------------------------------------+
# Python support was configured by external/py .
