# Mastiff Bazel configuration file.
# This file tries to group and simplify build options for Mastiff
# +------------------------------------------------------------+
# | Startup Options                                            |
# +------------------------------------------------------------+
startup --batch_cpu_scheduling
startup --host_jvm_args="-XX:-UseParallelGC"

fetch --experimental_multi_threaded_digest=true
query --experimental_multi_threaded_digest=true

# +------------------------------------------------------------+
# | Common Options                                             |
# +------------------------------------------------------------+
# Force bazel output to use colors (good for jenkins) and print useful errors.
common --color=yes

# +------------------------------------------------------------+
# | Build Configurations                                       |
# +------------------------------------------------------------+
# Make Bazel print out all options from rc files.
build --announce_rc
build --show_timestamps

# Setup stderr size
build --experimental_ui_max_stdouterr_bytes=-1

# Work around the sandbox issue.
build --spawn_strategy=standalone

# Enable colorful output of GCC
build --cxxopt="-fdiagnostics-color=always"

# Enable gdb info
#build --cxxopt="-g"
build --compilation_mode=dbg
build --copt=-ggdb
build --cxxopt=-ggdb
#build --copt=-g
#build --cxxopt=-g
build --strip=always
#build --strip=never

# dbg config, as a shorthand for '--config=optimize -c dbg'
build:dbg -c dbg
build:opt -c opt

# Do not show warnings from external dependencies.
# build --output_filter="^//"

build --per_file_copt=external/upb/.*@-Wno-sign-compare
build --per_file_copt=external/upb/.*@-Wno-error=stringop-truncation
#build --per_file_copt=external/upb/.*@-Werror=stringop-truncation
#
#build --copt="-Werror=sign-compare"
build --copt="-Werror=return-type"
build --copt="-Werror=unused-variable"
build --copt="-Werror=unused-but-set-variable"
build --copt="-Werror=switch"
build --cxxopt="-Werror=reorder"

build --cxxopt="-fPIC"
build --copt="-fPIC"

# Default paths for SYSTEM LIBRARIES
build --define=PREFIX=/usr
build --define=LIBDIR=$(PREFIX)/lib
build --define=INCLUDEDIR=$(PREFIX)/include
build --define=use_fast_cpp_protos=true

#build --config=optimize
# Instruction set optimizations
build:optimize --copt=-march=native
build:optimize --host_copt=-march=native

#build --config=cross_arm64
# cross compile for other platforms
# aarch
build:cross_arm64 --crosstool_top=//external/toolchain:mastiff_clang_suite_93
build:cross_arm64 --cpu=aarch64
build:cross_arm64 --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
# aarch 9.3 compiler
build:cross_arm64_93 --crosstool_top=//external/toolchain:mastiff_clang_suite_93
build:cross_arm64_93 --cpu=aarch64_93
build:cross_arm64_93 --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
# aarch 9.4 compiler
build:cross_arm64_94 --crosstool_top=//external/toolchain:mastiff_clang_suite_94
build:cross_arm64_94 --cpu=aarch64_94
build:cross_arm64_94 --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
# aarch 10.3 compiler
build:cross_arm64_103 --crosstool_top=//external/toolchain:mastiff_clang_suite_103
build:cross_arm64_103 --cpu=aarch64_103
build:cross_arm64_103 --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
# aarch 11.3 compiler
build:cross_arm64_113 --crosstool_top=//external/toolchain:mastiff_clang_suite_113
build:cross_arm64_113 --cpu=aarch64_113
build:cross_arm64_113 --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
# arm32
build:cross_arm32 --crosstool_top=//external/toolchain:mastiff_clang_suite_93
build:cross_arm32 --cpu=arm32
build:cross_arm32 --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
# x86
build:plat_x86 --crosstool_top=//external/toolchain:mastiff_clang_suite_93
build:plat_x86 --cpu=x86_64
build:plat_x86 --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
# build:plat_x86 --linkopt=-shared
# build:plat_x86 --cxxopt=-fPIC
# build:plat_x86 --copt=-fPIC
# default x64
build:plat_default --verbose_failures

# Spectial platform setting for boost coroutie
#build --host_platform=@bazel_tools//platforms:linux
#build --host_platform=@bazel_tools//platforms:x86_64
#build --platforms=@bazel_tools//platforms:linux
#build --platforms=@bazel_tools//platforms:aarch64
#build --platforms=@behaviour_tree//behaviour_tree:linux_aarch_64

# Build with profiling
build:prof --linkopt=-lprofiler
build:prof --cxxopt="-DENABLE_PERF=1"

# Build Mastiff with C++ 17 features.
build:c++17 --cxxopt=-std=c++1z
# build:c++17 --cxxopt=-stdlib=libc++
build:c++1z --config=c++17
build --cxxopt=-std=c++17
build --host_cxxopt=-std=c++17

# Enable C++14 (aka c++1y) by default
#build --cxxopt="-std=c++14"
#build --host_cxxopt="-std=c++14"

# +------------------------------------------------------------+
# | Test Configurations                                        |
# +------------------------------------------------------------+
test --flaky_test_attempts=3
test --test_size_filters=small,medium
# test --test_env=LD_LIBRARY_PATH
# test --test_env=PYTHONPATH

# By default prints output only from failed tests.
test --test_output=errors

test:unit_test --test_verbose_timeout_warnings

coverage --javabase="@bazel_tools//tools/jdk:remote_jdk11"
# coverage --host_javabase="@bazel_tools//tools/jdk:remote_jdk11"
coverage --instrument_test_targets
coverage --combined_report=lcov
coverage --nocache_test_results
# coverage --coverage_report_generator="@bazel_tools//tools/test/CoverageOutputGenerator/java/com/google/devtools/coverageoutputgenerator:Main"

coverage --cxxopt=--coverage
coverage --cxxopt=-fprofile-arcs
coverage --cxxopt=-ftest-coverage
coverage --linkopt=-lgcov


# +------------------------------------------------------------+
# | CPP Lint Tests & Unit Tests                                |
# +------------------------------------------------------------+
# By default, cpplint tests are run as part of `bazel test` alongside all of
# the other compilation and test targets.  This is a convenience shortcut to
# only do the cpplint testing and nothing else.
# Do bazel test --config=cpplint <target> to enable this configuration.
# To enable the lint test, the BUILD *must* load the cpplint.bzl by having
# 'load("//tools:cpplint.bzl", "cpplint")' at the beginning and 'cpplint()'
# at the end.
test:cpplint --test_tag_filters=cpplint
test:cpplint --build_tests_only
test:cpplint --flaky_test_attempts=1
# Regular unit tests.
test:unit_test --test_tag_filters=-cpplint
# Coverage tests
coverage --test_tag_filters=-cpplint

# +------------------------------------------------------------+
# | Python Configurations                                      |
# +------------------------------------------------------------+
# Python support was configured by external/py .
