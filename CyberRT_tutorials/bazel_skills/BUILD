#
# Test bazel tools features for tutorial
#

##BZL.DEL:this
##BZL.DEL:all

load("@rules_cc//cc:defs.bzl",
     "cc_library",
     "cc_binary",
     "cc_test")

load(":bzl_skills.bzl",
     "write_file_by_string",
     "gen_cc_by_template",
     "gen_file_by_macro",
     "git_version_m",
     "mstf_library")

package(default_testonly = True)

print("BUILD file for bazel tutorials")

###### ======================  1, generate file by writing string ====================== ######
##BZL.BUILD:write_file_by_write_string.txt
# cat bazel-bin/CyberRT_tutorials/bazel_skills/write_file_by_write_string.txt
write_file_by_string(
    name = "write_file_by_write_string.txt",
    usr = "Lihu",
    say = "Are U OK?"
)
###### ======================  1, generate file by writing string ====================== ######

###### ====================== 2, write file by bzl native macro ====================== ######
##BZL.BUILD:write_file_by_bzl_macro.txt
# write_file_by_bzl_macro_gen
# cat bazel-bin/CyberRT_tutorials/bazel_skills/write_file_by_bzl_macro.txt
gen_file_by_macro(
    name = "write_file_by_bzl_macro",
    usr = "Tarzen",
    say = "Hi Monkey, Get Funky!",
)
###### ====================== 2, write file by bzl native macro ====================== ######

###### ====================== 3, generate file by template ====================== ######
##BZL.BUILD:gen_hello_world_by_template_cc
# cat bazel-bin/CyberRT_tutorials/bazel_skills/gen_hello_world_by_template_cc.cc
gen_cc_by_template(
    name = "gen_hello_world_by_template_cc",
    user = "Lihu",
    greeting = "U're Handsome",
    template = ":hello.cc.tpl",
)
##BZL.BUILD:gen_hello_monkey_by_template_cc
# cat bazel-bin/CyberRT_tutorials/bazel_skills/gen_hello_monkey_by_template_cc.cc
gen_cc_by_template(
    name = "gen_hello_monkey_by_template_cc",
    user = "Tarzen",
    greeting = "I'm Strong",
    template = ":hello.cc.tpl",
)
##BZL.BUILD:gen_hello_god_by_template_cc
# cat bazel-bin/CyberRT_tutorials/bazel_skills/gen_hello_god_by_template_cc.cc
gen_cc_by_template(
    name = "gen_hello_god_by_template_cc",
    user = "God",
    greeting = "All men are created equal",
    template = ":hello.cc.tpl",
)
###### ====================== 3, generate file by template ====================== ######

###### ====================== 4, generate file by genrule in BUILD ====================== ######
##BZL.BUILD:gen_file_by_genrule
# gen_file_by_genrule.txt
# cat bazel-bin/CyberRT_tutorials/bazel_skills/gen_file_by_genrule.txt
genrule(
    name = "gen_file_by_genrule",
    outs = ["gen_file_by_genrule.txt"],
    cmd = "echo \"Hello World!\ngenerated by genrule!\" > $@",
)

##BZL.RUN:gen_file_by_genrule_show
# TODO, sh_binary
sh_binary(
    name = "gen_file_by_genrule_show",
    srcs = [
        "test_sh/echo.sh",
    ],
    data = [
        ":gen_file_by_genrule.txt"
    ],
)
###### ====================== 4, generate file by genrule in BUILD ====================== ######

###### ====================== 5, write file by bzl macro ====================== ######
##BZL.BUILD:get_repo_info
# cat bazel-bin/CyberRT_tutorials/bazel_skills/git_version.txt
genrule(
    name = "get_repo_info",
    outs = ["git_version.txt"],
    local = 1,
    cmd = "\
        cd CyberRT_tutorials/ && \
        echo -e \"commit: \\c\" > ../$(@) && \
        git log -1 --pretty=format:%h >> ../$(@) && \
        echo -e \", author: \\c\" >> ../$(@) && \
        git log -1 --pretty=format:%an >> ../$(@) && \
        echo -e \", date: \\c\" >> ../$(@) && \
        git log -1 --pretty=format:%cD >> ../$(@) && \
        echo -e \", branch: \\c\" >> ../$(@) && \
        git symbolic-ref --short -q HEAD >> ../$(@) && \
        cd - && \
        cat $(@)",
)
###### ====================== 5, write file by bzl macro ====================== ######

###### ====================== 6, get git version by bzl macro ====================== ######
##BZL.BUILD:get_repo_info_m
# cat bazel-bin/CyberRT_tutorials/bazel_skills/git_info_m.txt
git_version_m(
    name = "get_repo_info_m",
    out = ["git_info_m.txt"],
    version = "xx",
)
###### ====================== 6, get git version by bzl macro ====================== ######

###### ====================== 7, platform constraint ====================== ######
config_setting(
    name = "gen_hello_world",
    values = {
        #"cpu": "x86_64", #--cpu x86_64
        "compilation_mode": "opt", #-c opt
        #"force_pic": "false", #--noforce_pic
    },
)
config_setting(
    name = "gen_hello_monkey",
    values = {
        #"cpu": "aarch64_94", #--cpu aarch64_94
        "compilation_mode": "dbg", #-c dbg
        #"force_pic": "true", #--force_pic=1
        "define": "foo=bar", #--define foo=bar
    },
)
##BZL.RUN:hello_by_template_bin
##BZL.RUN:hello_by_template_bin##BZL.OPTS:{-c opt}
##BZL.RUN:hello_by_template_bin##BZL.OPTS:{--define foo=bar -c dbg}
cc_binary(
    name = "hello_by_template_bin",
    deps = [
        "hello_by_mstf",
    ],
)
mstf_library(
    name = "hello_by_mstf",
    srcs = select({
        "gen_hello_world" : [":gen_hello_world_by_template_cc"], #gen_hello_world_by_template_cc.cc
        "gen_hello_monkey" : [":gen_hello_monkey_by_template_cc"], #gen_hello_monkey_by_template_cc.cc
        "//conditions:default": [":gen_hello_god_by_template_cc"], #gen_hello_god_by_template_cc.cc
    }),
)

##BZL.RUN:my_rocks
##BZL.RUN:my_rocks --platforms=//CyberRT_tutorials/bazel_skills:basalt_platform
##BZL.RUN:my_rocks --platforms=//CyberRT_tutorials/bazel_skills:marble_platform
sh_binary(
    name = "my_rocks",
    srcs = select({
        ":basalt": ["test_sh/pyroxene.sh"],
        ":marble": ["test_sh/calcite.sh"],
        "//conditions:default": ["test_sh/feldspar.sh"],
    }),
)

# constraint_setting acts as an enum type, and constraint_value as an enum value.
constraint_setting(name = "color")
constraint_value(name = "black", constraint_setting = "color")
constraint_value(name = "white", constraint_setting = "color")

constraint_setting(name = "texture")
constraint_value(name = "smooth", constraint_setting = "texture")
constraint_value(name = "coarse", constraint_setting = "texture")

constraint_setting(name = "type")
constraint_value(name = "igneous", constraint_setting = "type")
constraint_value(name = "metamorphic", constraint_setting = "type")

config_setting(
    name = "basalt",
    constraint_values = [
        ":black",
        ":igneous",
    ],
)
config_setting(
    name = "marble",
    constraint_values = [
        ":white",
        ":metamorphic",
    ],
)

platform(
    name = "basalt_platform",
    constraint_values = [
        ":black",
        ":coarse",
        ":igneous",
    ],
)
platform(
    name = "marble_platform",
    constraint_values = [
        ":white",
        ":smooth",
        ":metamorphic",
    ],
)

# choose directly by reading constraint_value s
##BZL.RUN:your_rocks
##BZL.RUN:your_rocks --platforms=//CyberRT_tutorials/bazel_skills:marble_platform
##BZL.RUN:your_rocks --platforms=//CyberRT_tutorials/bazel_skills:basalt_platform
sh_binary(
    name = "your_rocks",
    srcs = select({
        ":igneous": ["test_sh/igneous.sh"],
        ":metamorphic": ["test_sh/metamorphic.sh"],
        "//conditions:default": ["test_sh/igneous.sh"],
    }),
)
###### ====================== 7, platform constraint ====================== ######

###### ====================== 8, Platforms configuration ====================== ######
# bazel build //CyberRT_tutorials/bazel_skills:gen_linux_arm_hello_world_by_template
gen_cc_by_template(
    name = "gen_linux_arm_hello_world_by_template",
    #generate gen_linux_arm_hello_world_by_template.c
    user = "ARM",
    greeting = "Platform ARM32, OS Linux",
    template = ":hello.cc.tpl",
)

# bazel build //CyberRT_tutorials/bazel_skills:gen_linux_ppc_hello_world_by_template
gen_cc_by_template(
    name = "gen_linux_ppc_hello_world_by_template",
    #generate gen_linux_ppc_hello_world_by_template.c
    user = "PPC",
    greeting = "Platform PPC, OS Linux",
    template = ":hello.cc.tpl",
)

# bazel build //CyberRT_tutorials/bazel_skills:gen_linux_aarch64_hello_world_by_template
gen_cc_by_template(
    name = "gen_linux_aarch64_hello_world_by_template",
    #generate gen_linux_aarch64_hello_world_by_template.c
    user = "AARCH64",
    greeting = "Platform AARCH64, OS Linux",
    template = ":hello.cc.tpl",
)

# bazel build //CyberRT_tutorials/bazel_skills:gen_linux_x86_64_hello_world_by_template
gen_cc_by_template(
    name = "gen_linux_x86_64_hello_world_by_template",
    #generate gen_linux_x86_64_hello_world_by_template.c
    user = "X64",
    greeting = "Platform X86_64, OS Linux",
    template = ":hello.cc.tpl",
)

# bazel build //CyberRT_tutorials/bazel_skills:gen_osx_aarch64_hello_world_by_template
gen_cc_by_template(
    name = "gen_osx_aarch64_hello_world_by_template",
    #generate gen_osx_aarch64_hello_world_by_template.c
    user = "AARCH64",
    greeting = "Platform AARCH64, OS OSX",
    template = ":hello.cc.tpl",
)

# bazel build //CyberRT_tutorials/bazel_skills:gen_osx_x86_64_hello_world_by_template
gen_cc_by_template(
    name = "gen_osx_x86_64_hello_world_by_template",
    #generate gen_osx_x86_64_hello_world_by_template.c
    user = "X64",
    greeting = "Platform X86_64, OS OSX",
    template = ":hello.cc.tpl",
)

# bazel build //CyberRT_tutorials/bazel_skills:gen_windows_x86_64_hello_world_by_template
gen_cc_by_template(
    name = "gen_windows_x86_64_hello_world_by_template",
    #generate gen_windows_x86_64_hello_world_by_template.c
    user = "X64",
    greeting = "Platform X86_64, OS Windows",
    template = ":hello.cc.tpl",
)

# bazel build //CyberRT_tutorials/bazel_skills:gen_android_arm_hello_world_by_template
gen_cc_by_template(
    name = "gen_android_arm_hello_world_by_template",
    #generate gen_android_arm_hello_world_by_template.c
    user = "ARM",
    greeting = "Platform ARM32, OS Android",
    template = ":hello.cc.tpl",
)

# bazel build //CyberRT_tutorials/bazel_skills:gen_android_aarch64_hello_world_by_template
gen_cc_by_template(
    name = "gen_android_aarch64_hello_world_by_template",
    #generate gen_android_aarch64_hello_world_by_template.c
    user = "AARCH64",
    greeting = "Platform Aarch64, OS Android",
    template = ":hello.cc.tpl",
)

# bazel build //CyberRT_tutorials/bazel_skills:gen_xx_xxx_hello_world_by_template
gen_cc_by_template(
    name = "gen_xx_xxx_hello_world_by_template",
    #generate gen_xx_xxx_hello_world_by_template.c
    user = "ARCH Unkown",
    greeting = "Platform ??, OS ??",
    template = ":hello.cc.tpl",
)

# bazel run //CyberRT_tutorials/bazel_skills:platform_choose_bin
# bazel run //CyberRT_tutorials/bazel_skills:platform_choose_bin --platforms=//CyberRT_tutorials/bazel_skills:pl_linux_arm
# bazel run //CyberRT_tutorials/bazel_skills:platform_choose_bin --platforms=//CyberRT_tutorials/bazel_skills:pl_linux_ppc
# bazel run //CyberRT_tutorials/bazel_skills:platform_choose_bin --platforms=//CyberRT_tutorials/bazel_skills:pl_linux_aarch64
# bazel run //CyberRT_tutorials/bazel_skills:platform_choose_bin --platforms=//CyberRT_tutorials/bazel_skills:pl_linux_x86_64
# bazel run //CyberRT_tutorials/bazel_skills:platform_choose_bin --platforms=//CyberRT_tutorials/bazel_skills:pl_osx_arm64
# bazel run //CyberRT_tutorials/bazel_skills:platform_choose_bin --platforms=//CyberRT_tutorials/bazel_skills:pl_osx_x86_64
# bazel run //CyberRT_tutorials/bazel_skills:platform_choose_bin --platforms=//CyberRT_tutorials/bazel_skills:pl_windows_x86_64
# bazel run //CyberRT_tutorials/bazel_skills:platform_choose_bin --platforms=//CyberRT_tutorials/bazel_skills:pl_android_arm
# bazel run //CyberRT_tutorials/bazel_skills:platform_choose_bin --platforms=//CyberRT_tutorials/bazel_skills:pl_android_aarch64
cc_binary(
    name = "platform_choose_bin",
    srcs = select({
        "linux_arm": [":gen_linux_arm_hello_world_by_template"],
        "linux_ppc": [":gen_linux_ppc_hello_world_by_template"],
        "linux_aarch64": [":gen_linux_aarch64_hello_world_by_template"],
        "linux_x86_64": [":gen_linux_x86_64_hello_world_by_template"],
        "osx_arm64": [":gen_osx_aarch64_hello_world_by_template"],
        "osx_x86_64": [":gen_osx_x86_64_hello_world_by_template"],
        "windows_x86_64": [":gen_windows_x86_64_hello_world_by_template"],
        "android_arm": [":gen_android_arm_hello_world_by_template"],
        "android_aarch64": [":gen_android_aarch64_hello_world_by_template"],
        "//conditions:default": [":gen_xx_xxx_hello_world_by_template"],
    }),
)
###### ====================== 8, Platforms configuration ====================== ######

###### ====================== 8, combining select()s ====================== ######
# bazel run //CyberRT_tutorials/bazel_skills:my_target
config_setting(
    name = "x86_mode",
    values = {
        "cpu": "x86_64", #--cpu x86_64
    },
)
config_setting(
    name = "armeabi_mode",
    values = {
        "cpu": "arm", #--cpu arm
    },
)
config_setting(
    name = "opt_mode",
    values = {
        "compilation_mode": "opt", #-c dbg
    },
)
config_setting(
    name = "dbg_mode",
    values = {
        "compilation_mode": "dbg", #-c dbg
    },
)
sh_binary(
    name = "my_target",
    srcs = ["test_sh/always_include.sh"] +
    select({
        ":x86_mode": ["test_sh/x86_src.sh"],
        ":armeabi_mode": ["test_sh/armeabi_src.sh"],
    },
    no_match_error = "Please build with x86 or arm platform",
    ) +
    select({
        ":opt_mode": ["test_sh/opt_extras.sh"],
        ":dbg_mode": ["test_sh/dbg_extras.sh"],
    },
    no_match_error = "Please build with an opt or debug param",
    ),
)
###### ====================== 9, combining select()s ====================== ######
