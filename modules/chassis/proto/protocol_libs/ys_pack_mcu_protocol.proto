syntax = "proto3";

import "google/protobuf/wrappers.proto";

package mstf.chss.proto;

/////////////////////////host -> mcu//////////////////////////
enum EE_SENSOR_PARAM_BIT_MASK {
    E_PARAM_TOF_SIGNAL = 0;
    E_PARAM_WHL_CURRENT = 1;
    E_PARAM_DOCK_SIGNAL = 2;
    E_PARAM_IMU_DATA = 3;
    E_PARAM_EULER = 4;
    E_PARAM_WHL_PULSE = 5;
    E_PARAM_POSE = 6;
    E_PARAM_BIT_MASK1 = 7;
    E_PARAM_SYS_TIME = 8;
    E_PARAM_IFR_WALL = 9;
    E_PARAM_WHL_SPEED = 10;
}

enum EE_MCU_FRAME_INFO {
    E_MCU_FRAME_SENTINEL = 0;
    E_MCU_FRAME_HEAD_1 = 0x01A5;
    E_MCU_FRAME_HEAD_2 = 0x02A5;
    E_MCU_FRAME_TAIL_1 = 0x035A;
    E_MCU_FRAME_TAIL_2 = 0x045A;
    E_MCU_FRAME_HT_LEN = 0x0502;
    E_MCU_FRAME_LEN_SIZE = 0x0602;
    E_MCU_FRAME_CRC_SIZE = 0x0702;
    E_MCU_FRAME_SEQ_SIZE = 0x0802;
    E_MCU_FRAME_CMD_SIZE = 0x0902;
    E_MCU_FRAME_LEAST_LEN = 0x090c;

    E_MCU_FRAME_LENGTH_HEAD_OFF_1 = 0x0a02;
    E_MCU_FRAME_LENGTH_HEAD_OFF_2 = 0x0b03;
    E_MCU_FRAME_SEQ_HEAD_OFF_1 = 0x0c04;
    E_MCU_FRAME_SEQ_HEAD_OFF_2 = 0x0d05;
    E_MCU_FRAME_TAIL_HEAD_OFF_1 = 0x0e02;
    E_MCU_FRAME_TAIL_HEAD_OFF_2 = 0x0f03;
    E_MCU_FRAME_CRC_HEAD_OFF_1 = 0x1000;
    E_MCU_FRAME_CRC_HEAD_OFF_2 = 0x1101;
}

        
enum EE_MCU_COMM_PORT_TYPE {
    E_MCU_COMM_PORT_SENTINEL            = 0; //sentinel
    E_MCU_COMM_PORT_SERIAL              = 1; //serial
    E_MCU_COMM_PORT_485                 = 2; //serial
    E_MCU_COMM_PORT_232                 = 3; //serial
    E_MCU_COMM_PORT_CAN                 = 4; //can
    E_MCU_COMM_PORT_I2C                 = 5; //i2c
    E_MCU_COMM_PORT_SPI                 = 6; //spi
    E_MCU_COMM_PORT_USB                 = 7; //usb
}

enum EE_SEND_MCU_COMMAND_TYPE {
    E_SERIAL_CMD_SENTINEL               = 0x0000; //sentinel
    E_SERIAL_GETONLINEINFO              = 0x0001;/* 发送联机信号 */
    E_SERIAL_GETHEARTBEATINFO           = 0x0002;/* 发送心跳命令 */
    E_SERIAL_GETSLAVEDEVICEINFO         = 0x0101;/* 发送获取底盘信息 */
    E_SERIAL_GETSENSORENABLEINFO        = 0x0102;/* 发送获取传感器的开关状态 */
    E_SERIAL_GETSENSORVALINFO           = 0x0103;/* 发送获取传感器的值 */

    E_SERIAL_SETSENSORENABLE            = 0x0201;/* 设置传感器开关状态 */
    E_SERIAL_SETROBOTVELOCITY           = 0x0202;/* 设置机器人速度 */

    E_SERIAL_SETWIFILEDDISPLAY          = 0x0203;/* 设置wifi灯显 */
    E_SERIAL_SETFANMOTORVELOCITY        = 0x0204;/* 设置风机吸力 */
    E_SERIAL_SETSENSORCALIBRATE         = 0x0205;/* 设置传感器标定 */
    E_SERIAL_SETTIMERREPORTPARAM        = 0x0206;/* 设置定时传输的参数（上传时间、是否上传） */
    E_SERIAL_SETROBOTPWROFF             = 0x0207;/* 关机命令 */
    E_SERIAL_SETUILEDDISPLAY            = 0x0208;/* 设置UI灯显 */
    E_SERIAL_SETMAINMOTORVELOCITY       = 0x0209;/* 设置中扫速度 */
    E_SERIAL_SETSIDEMOTORVELOCITY       = 0x020A;/* 设置变扫速度 */
    E_SERIAL_SETRESETSENSER             = 0x020B;/* 复位传感器 */
    E_SERIAL_PUMPMOTORVELOCITY          = 0x020C;/* 水泵传感器 */
    E_SERIAL_SETDISHCLOTHMOTORVELOCITY  = 0x020D;/* 设置抹布转盘速度 */
    E_SERIAL_FLIP_CAMERA                = 0x020E;

    E_SERIAL_MCUUPGRADESTART            = 0x0500;/* MCU升级开始 */
    E_SERIAL_MCUUPGRADESTATUS           = 0x0502;/* MCU升级状态 */
    E_SERIAL_MCUUPGRADEDATA             = 0x0503;/* 升级数据 */

    E_SERIAL_SENDACKTOMCU               = 0x8400;/* 接收确认报文 */

    /*----------------------------厂测命令------------------------------*/
    E_SERIAL_FACTORY_ENABLEFACTORY      = 0x0600;/* 切换工厂测试模式 */
    E_SERIAL_FACTORY_MCUDEVICEINFO      = 0x0601;/* 获取系统信息 */
    E_SERIAL_FACTORY_HEARTBEAT          = 0x0602;/* 心跳报文 */
    E_SERIAL_FACTORY_FUNCTIONCONTROL    = 0x0603;/* 数显开关报文 */
    E_SERIAL_FACTORY_MOTORS             = 0x0604;/* 电机开关报文 */
    E_SERIAL_FACTORY_SETCLIFFDATA       = 0x0605;/* 地检标定报文 */
    E_SERIAL_FACTORY_SETWALLSENSORDATA  = 0x0606;/* 墙检标定报文 */
    E_SERIAL_FACTORY_SETIMUDATA         = 0x0607;/* imu标定报文 */
    E_SERIAL_FACTORY_SETTOFDATA         = 0x0608;/* tof标定报文 */
    E_SERIAL_FACTORY_WIFI               = 0x0609;/* wifi测试 */
    E_SERIAL_FACTORY_LIDARINFO          = 0x060A;/* 雷达测试 */
    E_SERIAL_FACTORY_ALGODEVICEINFO     = 0x060B;/* 获取算法板信息 */
    E_SERIAL_FACTORY_DELETELOCALCONFIG  = 0x060C;/* 删除本地配置文件 */
    E_SERIAL_FACTORY_WRITESN            = 0x060D;/* 写入SN,MAC,KEY,UUID等 */
}

message EmptyData {

}

enum EE_ONLINEDEVICETYPE {
    E_LS_SENTINEL   = 0x00;
    E_LS_MD         = 0x01;
    E_LS_BASE       = 0x02;
    E_LS_UNI        = 0x03;
}

message OnlineMsg {
    EE_ONLINEDEVICETYPE    dev_type = 1;                  // 设备类型
    uint32                 proto_version = 2;             // 协议版本
}

message SetSensorEnable {
    uint32 sensor_status = 1;
}

message SetWheelsSpeed {
    float linear = 1;              // 线速度
    float angular = 2;             // 角速度

    uint32 lw_speed = 3;              // 左轮速度
    uint32 rw_speed = 4;              // 右轮速度
}

enum EE_LEDDISPLAYTYPE {
    E_WHITE_SENTINEL              = 0x00;
    E_WHITE_LIGHT_ON              = 0x01;         // 白长亮
    E_WHITE_LIGHT_OFF             = 0x02;         // 长灭
    E_WHITE_BREATHE               = 0x03;         // 呼吸
    E_WHITE_FLASH                 = 0x04;         // 闪烁
}

enum EE_FALSHEDLEDDISPLAYTYPE {
    E_WHITE_ALWAYS_SENTINEL     = 0x00;
    E_WHITE_ALWAYS_ON           = 0x01;         // 白长亮
    E_WHITE_ALWAYS_OFF          = 0x03;         // 长灭
}

message SetWifiLEDDisplay {
    EE_LEDDISPLAYTYPE          display_type = 1;          // 灯显类型
    uint32                     flash_times = 2;           // 闪次数
    uint32                     flash_rate = 3;            // 闪频率Hz
    EE_FALSHEDLEDDISPLAYTYPE   flashed_state = 4;          // 闪后状态
}

message SetCleanLEDDisplay {
    EE_LEDDISPLAYTYPE          clean_display_type = 1;
    uint32                     clean_breathe_interval = 2;
    uint32                     clean_flash_rate = 3;
    EE_FALSHEDLEDDISPLAYTYPE   clean_flashed_state = 4;
    EE_LEDDISPLAYTYPE          charge_display_type = 5;
    uint32                     charge_breathe_interval = 6;
    uint32                     charge_flash_rate = 7;
    EE_FALSHEDLEDDISPLAYTYPE   charge_flashed_state = 8;
    EE_LEDDISPLAYTYPE          error_display_type = 9;
    uint32                     error_breathe_interval = 10;
    uint32                     error_flash_rate = 11;
    EE_FALSHEDLEDDISPLAYTYPE   error_flashed_state = 12;
}

message SetFanSuction {
    uint32 fan_motor_level = 1; // 风机档位等级，0～10
}

enum EE_CALIBRATIONENABLE {
    E_CALIBRATION_ON        = 0x00;         // 需要标定
    E_CALIBRATION_OFF       = 0x01;         // 不需要标定
}

message SetSensorCalibration {
    uint32     wall_sensor_state = 1;         // 墙检标定
    uint32     wall_sensor_param = 2;         // 墙检参数:0~200mm、标定值为0的距离
    uint32     floor_sensor_state = 3;        // 地检标定
    uint32     floor_sensor_param = 4;        // 地检参数:0~200mm，标定值为0的距离
    uint32     IMU_state = 5;                 // IMU标定
    EmptyData  IMU_param = 6;                 // IMU参数:无
    uint32     TOF_state = 7;                 // TOF标定
    uint32     TOF_param = 8;                 // TOF参数:标定参数为测试距离
}

enum EE_BITMASK0_ENABLE {
    E_BITMASK0_ENABLE_SENTINEL          = 0x00;             // TOF数据有效
    E_BITMASK0_ENABLE_TOFDATA           = 0x01;             // TOF数据有效
    E_BITMASK0_ENABLE_WHEELSCURRENT     = 0x02;             // 轮子电流数据有效
    E_BITMASK0_ENABLE_RECHARGESIG       = 0x04;             // 回充座信号数据有效
    E_BITMASK0_ENABLE_IMUDATA           = 0x08;             // IMU数据有效
    E_BITMASK0_ENABLE_IMUEULAR          = 0x10;             // IMU_Eular欧拉角数据有效
    E_BITMASK0_ENABLE_YARDSTICK         = 0x20;             // 码盘数据有效
    E_BITMASK0_ENABLE_FUSIONPOSTURE     = 0x40;             // 融合后的位姿数据有效
    E_BITMASK0_ENABLE_BITMASK1          = 0x80;             // 位掩码1有效
}

enum EE_BITMASK1_ENABLE {
    E_BITMASK1_ENABLE_SENTINEL          = 0x00;             // 系统时间
    E_BITMASK1_ENABLE_SYSTIME           = 0x01;             // 系统时间
    E_BITMASK1_ENABLE_INFRAREDWALL      = 0x02;             // 红外沿墙数据
    E_BITMASK1_ENABLE_WHEELSVELOCITY    = 0x04;             // 左右轮速度数据
}

message McuSensorConfig {
    uint32 bit_mask_0 = 1;
    uint32 bit_mask_1 = 2;
    uint32 tof_data_freq = 3;
    uint32 whl_current_freq = 4;
    uint32 dock_sig_freq = 5;
    uint32 imu_data_freq = 6;
    uint32 euler_freq = 7;
    uint32 whl_pulse_freq = 8;
    uint32 pose_data_freq = 9;
    uint32 slave_time_freq = 10;
    uint32 ifr_wall_freq = 11;
    uint32 whl_speed_freq = 12;
}

enum EE_POWEROFF {
    E_POWER_SHUTDOWN        = 0x00;     // 关机
    E_POWER_RESTART         = 0x01;     // 重启
}

message SetPowerOff {
    EE_POWEROFF option = 1;
}

message SetMainBrushSpeed {
    uint32 main_motor_level = 1;        // 中扫速度，0～10
}

message SetSideBrushSpeed {
    uint32 side_motor_level = 1;        // 边扫速度，0～10
}

enum EE_PUMPSPEEDOPTION {
    E_PUMP_NONE            = 0x00;         // 无水
    E_PUMP_TRACE           = 0x01;         // 微量
    E_PUMP_MEDIUM          = 0x02;         // 中量
    E_PUMP_SUBSTANTIAL     = 0x03;         // 大量
}

message SetPumpSpeed {
    EE_PUMPSPEEDOPTION pump_motor_level = 1; // 水泵速度，0无水.1微量.2中量.3大量
}

message SetMopSpeed {
    int32 mop_motor_level = 1; //-10—10、抹布速度等级与电机有关，此处数据只表示等级。正代表正转，负代表反转.
}

enum EE_RESETMASK {
    E_RESET_SNETINEL    = 0x00;         // TOF传感器
    E_RESET_TOF         = 0x01;         // TOF传感器
    E_RESET_IMU         = 0x02;         // IMU
}

message SetResetSensor {
    EE_RESETMASK reset = 1;
}

enum EE_UPDATARESULT {
    E_UPDATE_SUCCESS         = 0x00;
    E_UPDATE_FAILED          = 0x01;
}

message UpdateStatus {
    EE_UPDATARESULT result = 1;
}

message UpdateDataFrame {
    uint32 data_seq = 1;          // 升级数据包序号
    uint32 data_len = 2;          // 升级数据的长度
    bytes updata_data = 3;        // 升级数据的内容
}

enum EE_RECIEVEMCURESULT {
    E_RECIEVE_SUCCESS       = 0x00;         // 接收成功
    E_RECIEVE_FAILEDCRC     = 0x01;         // 接收失败，CRC校验错
    E_RECIEVE_FAILEDLEN     = 0x02;         // 接收失败，长度出错
}

message SendAckToMcu {
    EE_RECIEVEMCURESULT recv_result = 1; // 接收结果
    //TODO
    //EE_RECV_MCU_DATA_TYPE upstream_cmd = 2; // 主动上报的命令字
    int32 upstream_cmd = 2; // 主动上报的命令字
}


message FlipCamera {
    int32 flip = 1;
}

enum EE_FACTORYENABLE {
    E_FACTORY_ON        = 0x00;
    E_FACTORY_OFF       = 0x01;
}

message FactoryEnable {
    EE_FACTORYENABLE factory_status = 1;
}

message FactoryGetMCUDeviceInfo {
    uint32 get_mcu_device_info = 1; // [default = 0x00];
}

message FactoryHeartbeat {
    uint32 get_heartbeat = 1; // [default = 0x00];
}

enum EE_FACTORYSETDIGITALDISPLAY {
    E_FACTORY_DISABLE       = 0x00;
    E_FACTORY_ENABLE        = 0x01;
}

message FactorySetDigitalDisplay {
    uint32 enable_digital_display = 1;
}

enum EE_FACTORYENABLEMOTORS {
    E_FACTORY_DISABLEMOTORS         = 0x00;
    E_FACTORY_LEFTWHEELMOTOR        = 0x01;         // 左轮电机
    E_FACTORY_RIGHTWHEELMOTOR       = 0x02;         // 右轮电机
    E_FACTORY_FANMOTOR              = 0x04;         // 风机
    E_FACTORY_MAINBRUSHMOTOR        = 0x08;         // 中扫电机
    E_FACTORY_SIDEBRUSHMOTOR        = 0x10;         // 边扫电机
    E_FACTORY_PUMPMOTOR             = 0x20;         // 水泵电机
}

message FactorySetMotors {
    uint32 enable_motors = 1;
}

message FactoryCalibration {
    uint32 cliff_calibration_value = 1; // [default = 0];
    uint32 wall_calibration_value = 2; // [default = 0];
    uint32 imu_calibration_value = 3; // [default = 0];
    uint32 tof_calibration_value = 4; // [default = 0];
}

enum EE_FACTORYWIFISET {
    E_FACTORY_SENTINEL          = 0x00;
    E_FACTORY_WIFION            = 0x01;
    E_FACTORY_WIFIOFF           = 0x02;
    E_FACTORY_SENDWIFIINFO      = 0x03;
}

message FactoryWifi {
    EE_FACTORYWIFISET  wifi_set = 1;
    string             wifi_name = 2;
    string             wifi_pwd = 3;
}

enum EE_FACTORYLIDARSET {
    E_FACTORY_SNETINEL      = 0x00;
    E_FACTORY_LIDARON       = 0x01;
    E_FACTORY_LIDAROFF      = 0x02;
}

message FactoryLidar {
    EE_FACTORYLIDARSET     lidar_status = 1;
    uint32                 lidar_start_angle = 2;
    uint32                 lidar_end_angle = 3;
}

message FactoryAlgoDevice {
    uint32 get_algo_device_info = 1; // [default = 0x00];
}

message FactoryDeleteConfig {
    uint32 delete_config_file = 1; // [default = 0x01];
}

enum EE_FACTORYBASEINFOCMD {
    E_FACTORY_WRITEBASEINFO             = 0x00;         // 写入
    E_FACTORY_DELETEBASEINFO            = 0x01;         // 删除
    E_FACTORY_REWRITEBASEINFO           = 0x03;         // 删除并重新写入
}

message FactoryBaseInfo {
    EE_FACTORYBASEINFOCMD  baseinfo_cmd = 1;
    string                 baseinfo_sn = 2;
    string                 baseinfo_mac = 3;
    string                 baseinfo_key = 4;
    string                 baseinfo_uuid = 5;
}

enum EE_SERIAL_EAI_LIDAR_CTL_CMD {
    E_SERIAL_LIDAR_SENTINEL             = 0x00;
    E_SERIAL_LIDAR_START_SCAN           = 0x60;     // 开始扫描，输出点云数据
    E_SERIAL_LIDAR_STOP_SCAN            = 0x65;     // 停机，停止扫描
    E_SERIAL_LIDAR_GET_INFO             = 0x90;     // 获取设备信息（型号、固件、硬件版本）
    E_SERIAL_LIDAR_GET_HEALTH_STATUS    = 0x92;     // 获取设备健康状态
    E_SERIAL_LIDAR_INCREASE_TENTH_FREQ  = 0x09;     // 增加 0.1Hz 当前设置的扫描频率
    E_SERIAL_LIDAR_DECREASE_TENTH_FREQ  = 0x0A;     // 减小 0.1Hz 当前设置的扫描频率
    E_SERIAL_LIDAR_INCREASE_ONE_FREQ    = 0x0B;     // 增加 1Hz 当前设置的扫描频率
    E_SERIAL_LIDAR_DECREASE_ONE_FREQ    = 0x0C;     // 减小 1Hz 当前设置的扫描频率
    E_SERIAL_LIDAR_GET_FREQ             = 0x0D;     // 获取当前设置的扫描频率
    E_SERIAL_LIDAR_SOFT_REBOOT          = 0x40;     // 设备软重启
}

message EaiLidarCtl {
    EE_SERIAL_EAI_LIDAR_CTL_CMD ctl_cmd = 1;
}

/////////////////////////mcu -> host//////////////////////////
enum EE_RECV_MCU_DATA_TYPE {
    E_RECV_MCU_DATA_SENTINEL        = 0x0000; //sentinel

    //query & ack
    E_RECV_MCU_ACK_ONLINE           = 0x8001; //MCU ack(0x001): on line
    E_RECV_MCU_ACK_HEART_BEAT       = 0x8002; //MCU ack(0x002): heart beat
    E_RECV_MCU_ACK_SLAVE_INFO       = 0x8101; //MCU ack(0x101): device(MCU chassis) info
    E_RECV_MCU_ACK_SENSOR_EN_STAT   = 0x8102; //MCU ack(0x102): sensor enable stat
    E_RECV_MCU_ACK_CHECK_SENSOR     = 0x8103; //MCU ack(0x103): general chassis sensor info

    //ctrl & ack
    //MCU ack(0x201): ctrl sensor enable result
    //MCU ack(0x202): ctrl robot speed result
    //MCU ack(0x203): ctrl wifi led display result
    //MCU ack(0x204): ctrl fan motor suction result
    //MCU ack(0x205): ctrl sensor calibration result
    //MCU ack(0x206): ctrl periodical parametor transfer result
    //MCU ack(0x207): ctrl soft poweroff result
    //MCU ack(0x208): ctrl clean job led display result
    //MCU ack(0x209): ctrl middle brush speed result
    //MCU ack(0x20a): ctrl side brush speed result
    //MCU ack(0x20c): ctrl pump motor speed result
    //MCU ack(0x20d): ctrl pallet speed result
    //MCU ack(0x20b): ctrl sensor reset result
    //MCU ack(0x20e): ctrl flip motor result
    //MCU ack(0x20f): ctrl charge current result
    E_RECV_MCU_CTRL_CHS_RESULT      = 0x8200;
    //

    //base station TODO 1
    E_RECV_MCU_CTRL_BASE_COLLECT    = 0x8210; //MCU ack(0x210): ctrl base station colletc dust result
    E_RECV_MCU_CTRL_BASE_WASHING    = 0x8211; //MCU ack(0x211): ctrl base station washing result
    E_RECV_MCU_CTRL_BSSE_CHARGING   = 0x8212; //MCU ack(0x212): ctrl base station charging result
    E_RECV_MCU_CTRL_BSSE_LOCK       = 0x8213; //MCU ack(0x213): ctrl base station charging result

    E_RECV_MCU_ACK_BSSE_VERSION     = 0x8214; //MCU ack(0x214): query base station version
    E_RECV_MCU_ACK_ROBOT_STATUS     = 0x8215; //MCU ack(0x215): query base station version

    E_RECV_MCU_CTRL_BASE_LED_RESULT = 0x8216; //MCU ack(0x216): ctrl base station led display result
    E_RECV_MCU_CTRL_433_PARING      = 0x8217; //MCU ack(0x217): ctrl 433 paring result
    E_RECV_MCU_CTRL_HOST_DORMANCY   = 0x8218; //MCU ack(0x218): ctrl dormancy result
    E_RECV_MCU_CTRL_HOST_CHARGING   = 0x8219; //MCU ack(0x219): ctrl charging result

    //periodically info
    E_RECV_MCU_PERIOD_SENSOR_INFO   = 0x0301; //MCU periodically sending: sensor info

    //change then send
    E_RECV_MCU_REPORT_BATTERY       = 0x0401; //MCU change send: battery
    E_RECV_MCU_REPORT_DROP_SENSOR   = 0x0402; //MCU change send: drop status
    E_RECV_MCU_REPORT_BUMP_SENSOR   = 0x0403; //MCU change send: bump status
    E_RECV_MCU_REPORT_LIFT_SENSOR   = 0x0404; //MCU change send: lift status
    E_RECV_MCU_REPORT_DUST_BOX      = 0x0405; //MCU change send: dust box status
    E_RECV_MCU_REPORT_WATER_TANK    = 0x0406; //MCU change send: water tank status
    E_RECV_MCU_REPORT_KEY_SIGNAL    = 0x0407; //MCU change send: key status
    E_RECV_MCU_REPORT_WALL_SENSOR   = 0x0408; //MCU change send: lift status
    E_RECV_MCU_REPORT_ERROR_CODE    = 0x0409; //MCU change send: error code
    E_RECV_MCU_REPORT_DOCK_TOUCH    = 0x040a; //MCU change send: dock touch signal
    E_RECV_MCU_REPORT_LOW_POWER     = 0x040b; //MCU change send: low power signal
    E_RECV_MCU_REPORT_MBRUSH_CURRENT= 0x040c; //MCU change send: middle brush current
    E_RECV_MCU_REPORT_TG_NW_WF_PC   = 0x040d; //MCU change send: toggle key, no water, water full
    E_RECV_MCU_REPORT_SUPER_SONIC   = 0x040e; //MCU change send: super sonic
    E_RECV_MCU_REPORT_LR_PALLET     = 0x040f; //MCU change send: left/right pallet status
    E_RECV_MCU_REPORT_FLIP_MOTOR    = 0x0410; //MCU change send: flip motor signal
    E_RECV_MCU_REPORT_BATTERY_TEMP  = 0x0411; //MCU change send: battery temperature

    //base enent TODO
    E_RECV_MCU_REPORT_BASE_KEY_EVENT= 0x0701; //MCU change send: base key event
    E_RECV_MCU_REPORT_BASE_KEY_ACK  = 0x8701; //MCU change send: base key event ack
    E_RECV_MCU_REPORT_BASE_POWERON  = 0x0702; //MCU change send: base power on
    E_RECV_MCU_REPORT_BASE_ON_ACK   = 0x8702; //MCU change send: base power on ack
    E_RECV_MCU_REPORT_BASE_C_STAT   = 0x0703; //MCU change send: base collect dust status
    E_RECV_MCU_REPORT_BASE_CS_ACK   = 0x8703; //MCU change send: base collect dust status ack
    E_RECV_MCU_REPORT_BASE_WASH     = 0x0704; //MCU change send: base washing status
    E_RECV_MCU_REPORT_BASE_WASH_ACK = 0x8704; //MCU change send: base washing status ack
    E_RECV_MCU_REPORT_BASE_FAULT    = 0x0705; //MCU change send: base fault
    E_RECV_MCU_REPORT_BASE_FAULT_ACK= 0x8705; //MCU change send: base fault ack
    E_RECV_MCU_REPORT_BASE_BEAT     = 0x0706; //MCU change send: base heart beat
    E_RECV_MCU_REPORT_BASE_BEAT_ACK = 0x8706; //MCU change send: base heart beat ack
    E_RECV_MCU_REPORT_BASE_STAT     = 0x0707; //MCU change send: base status
    E_RECV_MCU_REPORT_BASE_STAT_ACK = 0x8707; //MCU change send: base status ack
    //base enent TODO

    //OTA
    E_RECV_MCU_OTA_ACK              = 0x8500; //MCU OTA send: ack

    //factory
    E_RECV_MCU_FAC_IN_OR_OUT        = 0x8600; //MCU factory send: enter/exit factory mode
    E_RECV_MCU_FAC_SYS_INFO         = 0x8601; //MCU factory send: system info
    E_RECV_MCU_FAC_HEART_BEAT_ACK   = 0x8602; //MCU factory send: heart beat ack
    E_RECV_MCU_FAC_DIGITAL_DISPLAY  = 0x8603; //MCU factory send: digital display ack
    E_RECV_MCU_FAC_MOTOR_SW_ACK     = 0x8604; //MCU factory send: motor switch ack
    E_RECV_MCU_FAC_DROP_CALIBRATE   = 0x8605; //MCU factory send: drop sensor calibration
    E_RECV_MCU_FAC_WALL_CALIBRATE   = 0x8606; //MCU factory send: wall sensor calibration
    E_RECV_MCU_FAC_IMU_CALIBRATE    = 0x8607; //MCU factory send: imu calibration
    E_RECV_MCU_FAC_TOF_CALIBRATE    = 0x8608; //MCU factory send: tof calibration
    E_RECV_MCU_FAC_WIFI_TEST_ACK    = 0x8609; //MCU factory send: wifi test ack
    E_RECV_MCU_FAC_LIDAR_TEST_ACK   = 0x860a; //MCU factory send: lidar test ack
    E_RECV_MCU_FAC_HOST_VESION      = 0x860b; //MCU factory send: host vesion
    E_RECV_MCU_FAC_PERIOD_SENSOR    = 0x0615; //MCU factory send: host vesion
}

//for E_RECV_MCU_ACK_ONLINE: 0x8001
message McuAckOnLineInfo {
    //0: ok
    //1: fail, do not recognize
    //2: fail, protocol vesion not support
    //3: fail, device  type not support
    google.protobuf.UInt32Value online_result = 1;

    google.protobuf.UInt32Value slave_support_vesion = 2; //slave support vesion
}

//for E_RECV_MCU_ACK_HEART_BEAT: 0x8002
message McuAckHeartBeat {
    google.protobuf.BoolValue heart_beat_result = 1;
}

//for E_RECV_MCU_ACK_SLAVE_INFO: 0x8101
message McuAckSlaveDeviceInfo {
    google.protobuf.StringValue serial_number = 2;
    google.protobuf.UInt32Value slave_chip_id = 3;
    google.protobuf.StringValue mcu_version = 4;
    google.protobuf.StringValue compile_time = 5;
    google.protobuf.UInt32Value slave_poweron_ms = 8;
}

//for E_RECV_MCU_ACK_SENSOR_EN_STAT: 0x8102
/*
message McuAckSensorEnStat {
    google.protobuf.BoolValue wall_en = 1;
    google.protobuf.BoolValue drop_en = 2;
    google.protobuf.BoolValue tof_en = 3;
    google.protobuf.BoolValue wheels_power = 4;
    google.protobuf.BoolValue fan_power = 5;
    google.protobuf.BoolValue main_brush_power = 6;
    google.protobuf.BoolValue side_brush_power = 7;
    google.protobuf.BoolValue pump_motor_power = 8;
    google.protobuf.BoolValue charge_en = 9;
    google.protobuf.BoolValue robot_power = 10;
    google.protobuf.BoolValue pump_en = 11;
    google.protobuf.BoolValue pallet_en = 12;
}
*/

enum EE_ERROR_CODE_TYPE {
    E_ERR_LEFT_WHEEL_OPEN = 0;
    E_ERR_LEFT_WHEEL_SHORTC = 1;
    E_ERR_RIGHT_WHEEL_OPEN = 2;
    E_ERR_RIGHT_WHEEL_SHORTC = 3;
    E_ERR_RIGHT_PALLET_OPEN = 4;
    E_ERR_RIGHT_PALLET_SHORTC = 5;
    E_ERR_MAIN_BRUSH_OPEN = 6;
    E_ERR_MAIN_BURSH_SHORTC = 7;
    E_ERR_SIDE_BRUSH_OPEN = 8;
    E_ERR_SIDE_BURSH_SHORTC = 9;
    E_ERR_COLLECT_DUST_MOTOR = 10;
    E_ERR_WRIGGLE_PUMP_OPEN = 11;
    E_ERR_WRIGGLE_PUMP_SHORTC = 12;
    E_ERR_DROP = 13;
    E_ERR_BUMP = 14;
    E_ERR_LIDAR_BUMP = 15;
    E_ERR_SUPER_SONIC = 16;
}

//for E_RECV_MCU_ACK_CHECK_SENSOR: 0x8103
message McuAckCheckSensorInfo {
    //for E_RECV_MCU_REPORT_BATTERY: 0x0401;
    google.protobuf.UInt32Value battery = 1;

    //for E_RECV_MCU_REPORT_DROP_SENSOR: 0x0402;
    google.protobuf.UInt32Value drop_stat = 2;
    //1: trigger, 0: OK
    //b0: left, b1: m-left, b2: m-right, b3: right

    //for E_RECV_MCU_REPORT_BUMP_SENSOR: 0x0403;
    google.protobuf.UInt32Value	bump_stat = 3;
    //1: trigger, 0: OK
    //b0: front left, b1: front right
    //b2: lidar left, b3: lidar right, b4: lidar front, b5: lidar top

    //for E_RECV_MCU_REPORT_LIFT_SENSOR: 0x0404;
    google.protobuf.UInt32Value liftoff_stat = 4;
    //1: lift off, 0: OK
    //b0: left lift, b1: right lift

    //for E_RECV_MCU_REPORT_DUST_BOX: 0x0405;
    google.protobuf.BoolValue dust_box = 5; //0: OK, 1: miss

    //for E_RECV_MCU_REPORT_SUPER_SONIC: 0x040e;
    google.protobuf.UInt32Value sonic_sig = 6; //0: floor board, 1: carpet

    //for E_RECV_MCU_REPORT_DOCK_TOUCH: 0x040a;
    google.protobuf.UInt32Value touch_dock_sig = 7; //charge signal
    //b0 ~ 1: touch(charging), 0: not touch
    //b1 ~ 1: charging, 0: not charging
    //b2 ~ 1: finish charge, 0: not finish

    //for E_RECV_MCU_REPORT_LR_PALLET: 0x040f;
    google.protobuf.UInt32Value pallet_stat = 9; //pallet stat
    //1: miss, 0: OK
    //b0: left, b1: right

    //for E_RECV_MCU_REPORT_BATTERY_TEMP: 0x0411;
    google.protobuf.Int32Value batter_temp = 10; //-30~70掳

    //for E_RECV_MCU_REPORT_TG_NW_WF_PC: 0x040d;
    google.protobuf.BoolValue toggle_key = 11; //0: shut down, 1: open up
    google.protobuf.BoolValue no_water = 12; //0: no water, 1: have water
    google.protobuf.BoolValue water_full = 13; //0: not full, 1: full

    //for E_RECV_MCU_REPORT_ERROR_CODE: 0x0409;
    message McuReportErrorCode {
        bool left_wheel_open = 1;
        bool left_wheel_short_cc = 2;
        bool right_wheel_open = 3;
        bool right_wheel_short_cc = 4;
        bool left_pallet_open = 5;
        bool left_pallet_short_cc = 6;
        bool right_pallet_open = 7;
        bool right_pallet_short_cc = 8;
        bool main_brush_open = 9;
        bool main_brush_short_cc = 10;
        bool side_brush_open = 11;
        bool side_brush_short_cc = 12;
        bool collect_dust_motor = 13;
        bool wriggle_pump_open = 14;
        bool wriggle_pump_short_cc = 15;
        bool drop = 16;
        bool bump = 17;
        bool lidar_bump = 18;
        bool super_sonic = 19;
    };
    McuReportErrorCode error_code = 14;

    //for E_RECV_MCU_REPORT_FLIP_MOTOR: 0x0410;
    google.protobuf.UInt32Value flip_cam_sig = 15; //flip camera motor
    //0: NG, 1: zero place, 2: right place

    //base station TODO
}

//for E_RECV_MCU_CTRL_CHS_RESULT: 0x8200
/*
message CtrlChassResult {
    google.protobuf.UInt32Value ctrl_result = 1;
    //0: success, 1: busy, 2: unnormal, 3: cmd error

    google.protobuf.UInt32Value ctrl_ack_type = 2;
    //for 0x201 ~ 0x20f
}
*/

//base station TODO 1
//0x8210 ~ 0x8219

enum EE_BIT_STANDFOR_TYPE {
    E_BIT_FOR_TOF = 0;
    E_BIT_FOR_MOTOR = 1;
    E_BIT_FOR_DOCKER = 2;
    E_BIT_FOR_IMU = 3;
    E_BIT_FOR_EULER = 4;
    E_BIT_FOR_WPULSE = 5;
    E_BIT_FOR_POSE = 6;
    E_BIT_FOR_MASK1 = 7; //for next bit valid
    E_BIT_FOR_SYSTIME = 8;
    E_BIT_FOR_IRADC = 9;
    E_BIT_FOR_WHL_SPEED = 10;

    //for factory expand
    E_BIT_FOR_BATTERY = 11;
    E_BIT_FOR_ALONG_WALL = 12;
    E_BIT_FOR_CAMERA = 13;
    E_BIT_FOR_MAGNET = 14;
    E_BIT_FOR_WALL_DETECT = 15;
    E_BIT_FOR_DROP = 16;
    E_BIT_FOR_IO = 17;

    E_BIT_FOR_NULL = 18;
}

message WheelCurrent {
    uint32 left_wc_ma = 1;
    uint32 right_wc_ma = 2;
}

message DockerIrSignal {
    uint32 left = 1;
    uint32 mleft = 2;
    uint32 mright = 3;
    uint32 right_front = 4;
    uint32 right = 5;
    uint32 left_front = 6;
    uint32 left_rear = 7;
    uint32 right_rear = 8;
}

message WheelPulse {
    int32 left_pulse = 1;
    int32 right_pulse = 2;
}

message ChassisTime {
    uint64 seconds = 1;
    uint64 nseconds = 2;
}

message AdcValue {
    //infra-red wall sensor signal
    uint32 ir_wall_right = 1;

    //infra-red ground sensor signal
    uint32 ir_ground_left = 2;
    uint32 ir_ground_left_front = 3;
    uint32 ir_ground_right_front = 4;
    uint32 ir_ground_right = 5;
    uint32 ir_ground_left_rear = 6;
    uint32 ir_ground_right_rear = 7;

    //calibration
    uint32 calib_left = 8;
    uint32 calib_mid_left = 9;
    uint32 calib_mid_right = 10;
    uint32 calib_right = 11;
    uint32 calib_left_rear = 12;
    uint32 calib_right_rear = 13;

    //lidar collision
    uint32 lidar_collision = 14;
}

//velocity, m/s
message WheelVelocity {
    float left = 1;
    float right = 2;
}

//for E_RECV_MCU_PERIOD_SENSOR_INFO: 0x0301
message McuReportComplicateData {
    google.protobuf.UInt32Value distance_to_wall = 1; //tof(mm)

    //wheel current
    WheelCurrent wheel_current = 2;

    //docker infra-red signal
    DockerIrSignal docker_ir = 3;

    //1, imu
    message ImuAcc {
        float accel_x = 1;
        float accel_y = 2;
        float accel_z = 3;
        float gyro_x = 4;
        float gyro_y = 5;
        float gyro_z = 6;
        float imu_temp = 7;

    };
    ImuAcc imu_acc = 4;

    message ImuEuler {
        float pitch = 1;
        float roll = 2;
        float yaw = 3;
    };
    ImuEuler euler_data = 5;

    WheelPulse pulse_of_wheel = 6;

    //2, odom
    message Pose {
        float x = 1;
        float y = 2;
        float theta = 3;
    };
    Pose pose_data = 7;

    ChassisTime slave_poweron_time = 8;

    AdcValue adc_val = 9;

    WheelVelocity wheel_velocity = 10;
}

message McuReportSimpleData {
    //for 0x0401~0x0405 &
    //0x040e, 0x040a, 0x040f, 0x0411, 0x040d, 0x0409, 0x0410
    McuAckCheckSensorInfo sdata = 1;

    //for E_RECV_MCU_REPORT_WATER_TANK: 0x0406;
    google.protobuf.BoolValue water_tank = 2; //1: miss, 0: OK

    //for E_RECV_MCU_REPORT_KEY_SIGNAL: 0x0407;
    google.protobuf.UInt32Value key_type = 3; //1, short click, 0: long press

    //for E_RECV_MCU_REPORT_WALL_SENSOR: 0x0408;
    google.protobuf.BoolValue wall_trig = 4; //1: triger, 0: no signal

    //for E_RECV_MCU_REPORT_LOW_POWER: 0x040b;
    google.protobuf.UInt32Value low_power = 5;
    //b1: low power & docking, 0: low power & shutdown

    //for E_RECV_MCU_REPORT_MBRUSH_CURRENT: 0x040c;
    google.protobuf.BoolValue middle_brush_current = 6; //1: OK, 0: carpet
}

//for E_RECV_MCU_OTA_ACK: 0x8500;
message McuReportOtaResult {
    uint32 ota_type = 1;
    uint32 ota_result = 2;
    //0x00: OK  0x01: crc fail, 0x02: seq number error, 0x03, length error

    uint32 ota_ctrl = 3;
}

message McuReportFactoryData {
    //for E_RECV_MCU_FAC_IN_OR_OUT: 0x8600;
    google.protobuf.UInt32Value in_out_result = 1; //0: close, 1: open

    //for E_RECV_MCU_FAC_SYS_INFO: 0x8601;
    message FacReportSysInfo {
        uint32 valid = 1;
        uint32 sn = 2;
        uint32 id = 3;
        string sys_ver = 4;
        string compile_time = 5;
    };
    FacReportSysInfo sys_info = 2;

    //for E_RECV_MCU_FAC_HEART_BEAT_ACK: 0x8602;
    google.protobuf.UInt32Value hand_shaking = 3; //0: shaking

    //for E_RECV_MCU_FAC_DIGITAL_DISPLAY: 0x8603;
    google.protobuf.UInt32Value digital_display = 4; //0: close, 1: open

    //for E_RECV_MCU_FAC_MOTOR_SW_ACK: 0x8604;
    google.protobuf.UInt32Value motor_power_ack = 5; //0: close, 1: open

    //E_RECV_MCU_FAC_DROP_CALIBRATE: 0x8605;
    google.protobuf.UInt32Value drop_calib = 6; //0: fail, 1: success

    //E_RECV_MCU_FAC_WALL_CALIBRATE: 0x8606;
    google.protobuf.UInt32Value wall_calib = 7; //0: fail, 1: success

    //E_RECV_MCU_FAC_IMU_CALIBRATE: 0x8607;
    google.protobuf.UInt32Value imu_calib = 8; //0: fail, 1: success

    //E_RECV_MCU_FAC_TOF_CALIBRATE: 0x8608;
    google.protobuf.UInt32Value tof_calib = 9; //0: fail, 1: success

    //E_RECV_MCU_FAC_WIFI_TEST_ACK: 0x8609;
    google.protobuf.UInt32Value wifi_test = 10;
    //0: start fail, 1: start success, 2, close fail, 3, close success

    //E_RECV_MCU_FAC_LIDAR_TEST_ACK: 0x860a;
    message FacAckLidarTest {
        uint32 freq = 1;
        uint32 start_angle = 2;
        uint32 end_angle = 3;
        uint32 start_distance = 4;
        uint32 delta_dist = 5;
        uint32 end_distance = 6;
    };
    FacAckLidarTest lidar_test = 11;

    //E_RECV_MCU_FAC_HOST_VESION: 0x860b;
    message FacAckHostVersion {
        //TODO
    };

    //E_RECV_MCU_FAC_PERIOD_SENSOR: 0x0615;
    message FacReportComplicateData {
        google.protobuf.UInt32Value battery_volt = 1; //volt
        google.protobuf.UInt32Value battery_percent = 2; //percent
        google.protobuf.UInt32Value charging_current = 3; //mA
        google.protobuf.UInt32Value charging_signal = 4; //0: no signal, 1: OK

        //docker infra-red signal
        message FacDockerIrSignal {
            uint32 left = 1;
            uint32 mleft = 2;
            uint32 mright = 3;
            uint32 right_front = 4;
            uint32 right = 5;
            uint32 left_front = 6;
            //not support now
            uint32 left_rear = 7;
            uint32 right_rear = 8;
        };
        FacDockerIrSignal docker_ir = 5;

        google.protobuf.UInt32Value tof_distance = 6; //mm

        google.protobuf.UInt32Value camera = 7;

        message FacMotorCurrentSpeed {
            uint32 left_wheel_current = 1;
            uint32 left_wheel_speed = 2;
            uint32 right_wheel_current = 3;
            uint32 right_wheel_speed = 4;
            uint32 left_brush_current = 5;
            uint32 left_brush_speed = 6;
            uint32 right_brush_current = 7;
            uint32 right_brush_speed = 8;
            uint32 mid_brush_current = 9;
            uint32 mid_brush_speed = 10;
            uint32 fan_brush_current = 11;
            uint32 fan_brush_speed = 12;
            uint32 pump_brush_current = 13;
            uint32 pump_brush_speed = 14;
        };
        FacMotorCurrentSpeed current_speed = 8;

        google.protobuf.UInt32Value pump_brush_speed = 9; //b0, left magnetic strip, b1: right

        message FacWallSensor {
            uint32 left = 1;
            uint32 mid_left = 2;
            uint32 mid_right = 3;
            uint32 right = 4;
        };
        FacWallSensor wall_sensor = 10;

        message FacDropSensor {
            uint32 left = 1;
            uint32 mid_left = 2;
            uint32 mid_right = 3;
            uint32 right = 4;
            uint32 reserve1 = 5;
            uint32 reserve2 = 6;
        };
        FacDropSensor drop_sensor = 11;

        message FacPeriphDev {
            uint32 dust_box = 1;
            uint32 water_tank = 2;
            uint32 stuck_prevent = 3;
            uint32 pump = 4;
            uint32 lidar_pump = 5;
            uint32 key = 6;
            uint32 lift_off = 7;
        };
        FacPeriphDev perith_dev = 12;

        message FacImuAccEuler {
            uint32 accel_x = 1;
            uint32 accel_y = 2;
            uint32 accel_z = 3;
            uint32 gyro_x = 4;
            uint32 gyro_y = 5;
            uint32 gyro_z = 6;
            float pitch = 7;
            float roll = 8;
            float yaw = 9;
        };
        FacImuAccEuler imu_data = 13;
    };
    FacReportComplicateData fac_comp_data = 12;

    McuReportOtaResult ota_data = 13;
}

enum E_FRAME_OFFSET {
    E_START_OFFSET 	= 0;
    E_LEN_OFFSET	= 2;
    E_NUM_OFFSET	= 4;
    E_CMD_OFFSET	= 6;
    E_BODY_OFFSET	= 8;
}
